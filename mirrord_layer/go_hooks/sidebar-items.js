window.SIDEBAR_ITEMS = {"fn":[["c_abi_syscall6_handler","Syscall & Syscall6 handler - supports upto 6 params, mainly used for accept4 Note: Depending on success/failure Syscall may or may not call this handler"],["c_abi_syscall_handler","Syscall & Rawsyscall handler - supports upto 4 params, used for socket, bind, listen, and accept Note: Depending on success/failure Syscall may or may not call this handler"],["enable_hooks","Note: We only hook “RawSyscall”, “Syscall6”, and “Syscall” because for our usecase, when testing with “Gin”, only these symbols were used to make syscalls. Refer:"],["enter_syscall","Clobbers rax, rcx"],["exit_syscall","clobbers xmm15, r14, rax"],["go_rawsyscall_detour","[Naked function] This detour is taken from `runtime.asmcgocall.abi0` Refer: https://go.googlesource.com/go/+/refs/tags/go1.19rc2/src/runtime/asm_amd64.s#806 Golang’s assembler - https://go.dev/doc/asm We cannot provide any stack guarantees when our detour executes(whether it will exceed the go’s stack limit), so we need to switch to system stack."],["go_runtime_abort","[Naked function] maps to runtime.abort.abi0, called by `gosave_systemstack_switch`"],["go_syscall6_detour","[Naked function] hook for Syscall6"],["go_syscall_detour","[Naked function] hook for Syscall"],["go_syscall_new_detour","Detour for Go >= 1.19 On Go 1.19 one hook catches all (?) syscalls and therefore we call the syscall6 handler always so syscall6 handler need to handle syscall3 detours as well."],["gosave_systemstack_switch","[Naked function] maps to gasave_systemstack_switch, called by asmcgocall.abi0"],["post_go1_19","Hooks for when hooking a post go 1.19 binary"],["pre_go1_19","Hooks for when hooking a pre go 1.19 binary"],["syscall_3","[Naked function] 3 param version (Syscall6) for making the syscall, libc’s syscall is not used here as it doesn’t return the value that go expects (it does translation)"],["syscall_6","[Naked function] 6 param version, used by Rawsyscall & Syscall"]]};