window.SIDEBAR_ITEMS = {"fn":[["__xstat_detour","Hook for libc’s stat syscall wrapper."],["access_detour","Hook for `libc::access`."],["access_logic","Implementation of access_detour, used in access_detour and faccessat_detour"],["assign_direntry","Assign DirEntryInternal to dirent"],["best_effort_cast","Tries to convert input to type O, if it fails it returns the max value of O. For example, if you put u32::MAX into a u8, it will return u8::MAX."],["closedir_detour",""],["enable_file_hooks","Convenience function to setup file hooks (`x_detour`) with `frida_gum`."],["faccessat_detour","Hook for `libc::faccessat`."],["fclose_detour",""],["fdopen_detour","Hook for `libc::fdopen`."],["fdopendir_detour",""],["ferror_detour","Used to distinguish between an error or `EOF` (especially relevant for `fgets`)."],["fgets_detour","Reads at most `capacity - 1` characters. Reading stops on `'\\n'`, `EOF` or on error. On success, it appends `'\\0'` to the end of the string (thus the limit on `capacity`)."],["fileno_detour","Hook for `libc::fileno`."],["fileno_logic","Implementation of fileno_detour, used in fileno_detour and fread_detour"],["fill_stat","Fills the `stat` struct with the metadata"],["fopen_detour","Hook for `libc::fopen`."],["fread_detour","Hook for `libc::fread`."],["fstat_detour","Hook for `libc::fstat`."],["fstatat_detour","Hook for `libc::fstatat`."],["fstatat_logic","Separated out logic for `fstatat` so that it can be used by go to match on the xstat result."],["getdents64_detour","Hook for getdents64, for Go’s `os.ReadDir` on Linux."],["lseek_detour","Hook for `libc::lseek`."],["lstat_detour","Hook for `libc::lstat`."],["nano_to_secs","Converts time in nano seconds to seconds, to match the `stat` struct which has very weird types used"],["open_detour","Hook for `libc::open`."],["open_file_stream_fd",""],["open_logic","Implementation of open_detour, used in open_detour and openat_detour We ignore mode in case we don’t bypass the call."],["openat_detour","Equivalent to `open_detour`, except when `raw_path` specifies a relative path."],["pread_detour",""],["pwrite_detour",""],["read_detour","Hook for `libc::read`."],["readdir_r_detour",""],["stat_detour","Hook for `libc::stat`."],["write_detour","Hook for `libc::write`."],["write_logic","Implementation of write_detour, used in  write_detour"]],"static":[["FN_ACCESS",""],["FN_CLOSEDIR",""],["FN_FACCESSAT",""],["FN_FCLOSE",""],["FN_FDOPEN",""],["FN_FDOPENDIR",""],["FN_FERROR",""],["FN_FGETS",""],["FN_FILENO",""],["FN_FOPEN",""],["FN_FREAD",""],["FN_FSTAT",""],["FN_FSTATAT",""],["FN_GETDENTS64",""],["FN_LSEEK",""],["FN_LSTAT",""],["FN_OPEN",""],["FN_OPENAT",""],["FN_PREAD",""],["FN_PWRITE",""],["FN_READ",""],["FN_READDIR_R",""],["FN_STAT",""],["FN_WRITE",""],["FN___XSTAT",""]],"type":[["FnAccess",""],["FnClosedir",""],["FnFaccessat",""],["FnFclose",""],["FnFdopen",""],["FnFdopendir",""],["FnFerror",""],["FnFgets",""],["FnFileno",""],["FnFopen",""],["FnFread",""],["FnFstat",""],["FnFstatat",""],["FnGetdents64",""],["FnLseek",""],["FnLstat",""],["FnOpen",""],["FnOpenat",""],["FnPread",""],["FnPwrite",""],["FnRead",""],["FnReaddir_r",""],["FnStat",""],["FnWrite",""],["Fn__xstat",""]]};