window.SIDEBAR_ITEMS = {"fn":[["access",""],["blocking_send_file_message",""],["close_remote_file_on_failure","Close the remote file if the call to [`libc::shm_open`] failed and we have an invalid local fd."],["closedir",""],["create_local_fake_file","The pair [`libc::shm_open`], [`libc::shm_unlink`] are used to create a temporary file (in `/dev/shm/`), and then remove it, as we only care about the `fd`. This is done to preserve `open_flags`, as [`libc::memfd_create`] will always return a `File` with read and write permissions (which is undesirable)."],["fdopen",""],["fdopendir","creates a directory stream for the `remote_fd` in the agent"],["fgets",""],["fopen","Calls [`open`] and returns a [`FILE`] pointer based on the local `fd`."],["get_remote_fd","Helper function that retrieves the `remote_fd` (which is generated by `mirrord_agent::util::IndexAllocator`)."],["getdents64",""],["lseek",""],["open","Blocking wrapper around `libc::open` call."],["openat",""],["path_from_rawish","Converts a [`CStr`] path into a [`PathBuf`], or bypasses when this fails."],["pread",""],["pwrite",""],["read","Blocking wrapper around [`libc::read`] call."],["readdir_r",""],["remote_read","Blocking request and wait on already found remote_fd"],["str_from_rawish","Converts a [`CStr`] path into a [`&str`], or bypasses when this fails."],["write",""],["xstat","General stat function that can be used for lstat, fstat, stat and fstatat. Note: We treat cases of `AT_SYMLINK_NOFOLLOW_ANY` as `AT_SYMLINK_NOFOLLOW` because even Go does that. rawish_path is Option<Option<&CStr>> because we need to differentiate between null pointer and non existing argument (For error handling)"]],"macro":[["should_ignore","should_ignore(path: P, write: bool) Checks if the file should be ignored, and returns a [`Bypass::IgnoredFile`] if it should."]],"struct":[["RemoteFile",""]]};