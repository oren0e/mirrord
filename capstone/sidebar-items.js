window.SIDEBAR_ITEMS = {"enum":[["Arch","Architectures for the disassembler"],["Endian","Disassembler endianness"],["Error","An error enum for this library"],["ExtraMode","Extra modes or features that can be enabled with some modes"],["Mode","Disassembler modes"],["RegAccessType","Represents how the register is accessed."],["Syntax","Disassembly syntax"]],"macro":[["define_cs_enum_wrapper_reverse","Define Rust enum that is created from C enum"],["define_impl_bitmask","Defines getters for a bitmask"]],"mod":[["InsnGroupType",""],["arch","Contains architecture-specific types and modules"],["prelude","Contains items that you probably want to always import"]],"static":[["NO_EXTRA_MODE","Represents that no extra modes are enabled. Can be passed to `Capstone::new_raw()` as the `extra_mode` argument."]],"struct":[["Capstone","An instance of the capstone disassembler"],["EmptyExtraModeIter","Represents an empty set of `ExtraMode`."],["Insn","A single disassembled CPU instruction."],["InsnDetail","Contains architecture-independent details about an [`Insn`]."],["InsnGroupId","Represents the group an instruction belongs to, which may be architecture-specific."],["InsnGroupIter","Iterator over instruction group ids"],["InsnId","Represents an instruction id, which may be architecture-specific."],["Instructions","Represents a slice of [`Insn`] returned by `Capstone` `disasm*()` methods."],["OwnedInsn","A single disassembled CPU instruction that lives on the Rust heap."],["RegId","Represents an register id, which is architecture-specific."]],"trait":[["EnumList","A C-like enum can list its variants"]],"type":[["CsResult",""],["InsnGroupIdInt","Integer type used in `InsnGroupId`"],["InsnIdInt","Integer type used in `InsnId`"],["RegIdInt","Integer type used in `RegId`"]]};